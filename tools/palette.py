from __future__ import annotations

"""
Tool to make palette array out of texture
"""

import os
import png
import argparse

from array import array

def main(src: str, dst: str):
    src = os.path.abspath(src)
    dst = os.path.abspath(dst)

    with open(dst, mode="wb") as f:
        f.write("// this file is generated by palette.py\r\n\r\n".encode("utf-8"))
        f.write("namespace resource {\r\n    const std::uint32_t PALETTE[256] = {\r\n".encode("utf-8"))

        if src.endswith(".png"):
            try:
                src_reader = png.Reader(filename=src)
                src_w, src_h, data, _ = src_reader.asRGBA8()
                src_img = sum([array('B', e) for e in data], array('B'))
                src_size = src_w * src_h

                for i in range(0, src_size):
                    pixel_start = i * 4
                    pixel_end = i * 4 + 4
                    c = src_img[pixel_start:pixel_end]
                    f.write("        ".encode("utf-8"))
                    f.write("0x{:02x}{:02x}{:02x}{:02x},\r\n".format(c[0], c[1], c[2], c[3]).encode("utf-8"))

            except FileNotFoundError:
                print("{} not found".format(src))
            except png.Error:
                print("{} is invalid".format(src))

        else:
            print("{} is not a *.png file".format(src))

        f.write("    };\r\n".encode("utf-8"))
        f.write("}\r\n".encode("utf-8"))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Tool to make palette out of texture")
    parser.add_argument("-s", "--src", type=str, required=True, help="Path to texture")
    parser.add_argument("-d", "--dst", type=str, required=True, help="Path to output")
    args = parser.parse_args()
    main(**vars(args))
